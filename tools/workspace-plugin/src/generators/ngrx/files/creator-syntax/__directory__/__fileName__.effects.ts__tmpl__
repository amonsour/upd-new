import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { createEffect, Actions, ofType } from '@ngrx/effects';
import { catchError, EMPTY, mergeMap, map } from 'rxjs';

import * as <%= className %>Actions from './<%= fileName %>.actions';

@Injectable()
export class <%= className %>Effects {
  <% if (useDataPersistence) { %>init$ = createEffect(() => this.dataPersistence.fetch(<%= className %>Actions.init, {
    run: (action: ReturnType<typeof <%= className %>Actions.init>, state: <%= className %>Feature.<%= className %>PartialState) => {
      // Your custom service 'load' logic goes here. For now just return a success action...
      return <%= className %>Actions.load<%= className %>Success({ <%= propertyName %>: [] });
    },
    onError: (action: ReturnType<typeof <%= className %>Actions.init>, error) => {
      console.error('Error', error);
      return <%= className %>Actions.load<%= className %>Failure({ error });
    }
  }));<% } else { %>init$ = createEffect(() => this.actions$.pipe(
    ofType(<%= className %>Actions.init),
    mergeMap(() => this.http.get('/api/<%= propertyName %>/getData', {
      responseType: 'json',
      observe: 'body',
    }).pipe(
      map((data) => <%= className %>Actions.load<%= className %>Success({ data })),
      catchError(() => EMPTY)
    ))
  ));<% } %>

  constructor(
    private readonly actions$: Actions, private http: HttpClient<% if (useDataPersistence) { %>,
    private readonly dataPersistence: DataPersistence<<%= className %>Feature.<%= className %>PartialState><% } %>
  ) {}
}
