import { createReducer, on, Action } from '@ngrx/store';

import * as <%= className %>Actions from './<%= fileName %>.actions';
import { <%= className %>Data } from './<%= fileName %>.models';

export const <%= constantName %>_FEATURE_KEY = '<%= propertyName %>';

export interface <%= className %>State {
  data: <%= className %>Data;
  loaded: boolean; // has the <%= className %> list been loaded
  error?: string | null; // last known error (if any)
}

export interface <%= className %>PartialState {
  readonly [<%= constantName %>_FEATURE_KEY]: <%= className %>State;
}

export const initialState: <%= className %>State = {
  // set initial required properties
  data: {},
  loaded: false,
  error: null,
};

const reducer = createReducer(
  initialState,
  on(<%= className %>Actions.init,
    state => ({ ...state, loaded: false, error: null })
  ),
  on(<%= className %>Actions.load<%= className %>Success, (state, { data }) => ({
    data: data,
    loaded: true,
    error: null,
  })),
  on(<%= className %>Actions.load<%= className %>Error, (state, { error }) => ({
    ...state,
    loaded: true,
    error,
  }))
);

export function <%= propertyName %>Reducer(state: <%= className %>State | undefined, action: Action) {
  return reducer(state, action);
}
